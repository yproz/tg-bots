import asyncio, logging, os, tempfile, contextlib, html
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update
from sqlalchemy.dialects.postgresql import insert
from db.session import create_tables, async_session_factory, sync_session_factory
from db.models import Account, Client
from services import excel_loader
import datetime as dt

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
BOT_USERNAME = os.getenv("BOT_USERNAME", "pricebot")
if not BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

from aiogram.client.default import DefaultBotProperties
bot = Bot(BOT_TOKEN)
dp = Dispatcher()

router = dp


def safe_error_message(error) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ–± –æ—à–∏–±–∫–∞—Ö"""
    return html.escape(str(error))


# -------------------------- HELP / START --------------------------
@dp.message(F.text.in_({"start", "/start"}))
async def cmd_start(m: Message):
    await m.answer(
        "üëã <b>–°–ü–ü –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–æ—Ç</b>\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /add_client ‚Äî –º–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞\n"
        "‚Ä¢ /add_account ‚Äî –º–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞\n"
        "‚Ä¢ /set_topic <account_id> ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å topic_id —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–¥–∞\n"
        "‚Ä¢ /get_template ‚Äî XLSX‚Äë—à–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª XLSX –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ /snapshot YYYY-MM-DD ‚Äî CSV‚Äë—Å—Ä–µ–∑ –°–ü–ü\n"
        "‚Ä¢ /collect_now ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä —Ü–µ–Ω —Å–µ–π—á–∞—Å\n"
        "\n<i>–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –°–ü–ü (–°–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π) –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö</i>",
        parse_mode="HTML"
    )


# ----------------------- ADD CLIENT (WIZARD) ------------------------------
class AddClient(StatesGroup):
    client_id = State()
    name = State()
    chat_id = State()
    parser_api_key = State()

@dp.message(Command("add_client"))
async def add_client_start(m: Message, state: FSMContext):
    await m.answer("üÜï –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –°–ü–ü –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n–í–≤–µ–¥–∏—Ç–µ client_id (–ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã):")
    await state.set_state(AddClient.client_id)

@dp.message(AddClient.client_id)
async def add_client_id(m: Message, state: FSMContext):
    await state.update_data(client_id=m.text.strip())
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä ¬´SEB¬ª):")
    await state.set_state(AddClient.name)

@dp.message(AddClient.name)
async def add_client_name(m: Message, state: FSMContext):
    await state.update_data(name=m.text.strip())
    await m.answer("–í–≤–µ–¥–∏—Ç–µ chat_id –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ (–º–æ–∂–Ω–æ 0, –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ –ø–æ–∑–∂–µ):")
    await state.set_state(AddClient.chat_id)

@dp.message(AddClient.chat_id)
async def add_client_chat(m: Message, state: FSMContext):
    await state.update_data(chat_id=int(m.text.strip()))
    await m.answer("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –ø–∞—Ä—Å–µ—Ä–∞ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º, –Ω–∞—Å—Ç—Ä–æ–∏—Ç–µ –ø–æ–∑–∂–µ):")
    await state.set_state(AddClient.parser_api_key)

@dp.message(AddClient.parser_api_key)
async def add_client_finish(m: Message, state: FSMContext):
    parser_key = m.text.strip() if m.text.strip() else None
    await state.update_data(parser_api_key=parser_key)
    data = await state.get_data()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync-—Å–µ—Å—Å–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ event loop
    def sync_insert():
        with sync_session_factory() as s:
            stmt = (
                insert(Client)
                .values(
                    id=data["client_id"], 
                    name=data["name"], 
                    group_chat_id=data["chat_id"],
                    parser_api_key=data["parser_api_key"]
                )
                .on_conflict_do_update(
                    index_elements=["id"],
                    set_={
                        "name": data["name"],
                        "group_chat_id": data["chat_id"],
                        "parser_api_key": data["parser_api_key"]
                    }
                )
            )
            s.execute(stmt)
            s.commit()
    import concurrent.futures
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(None, sync_insert)

    await m.answer(f"‚úÖ –ö–ª–∏–µ–Ω—Ç <b>{safe_error_message(data['client_id'])}</b> –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –°–ü–ü –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.", parse_mode="HTML")
    await state.clear()


# ----------------------- ADD ACCOUNT (WIZARD) ------------------------------
class AddAccount(StatesGroup):
    market = State()
    client_id = State()
    account_id = State()
    ozon_client_id = State()
    api_key = State()
    region = State()

@dp.message(Command("add_account"))
async def add_account_start(m: Message, state: FSMContext):
    await m.answer("üõ† –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –°–ü–ü –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n"
                   "–£–∫–∞–∂–∏—Ç–µ marketplace (ozon / wb):")
    await state.set_state(AddAccount.market)

@dp.message(AddAccount.market)
async def add_account_market(m: Message, state: FSMContext):
    market = m.text.strip().lower()
    if market not in {"ozon", "wb"}:
        await m.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–Ω–æ ozon –∏–ª–∏ wb.")
        return
    await state.update_data(market=market)
    await m.answer("–í–≤–µ–¥–∏—Ç–µ client_id (–∫–ª—é—á –∫–ª–∏–µ–Ω—Ç–∞ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ):")
    await state.set_state(AddAccount.client_id)

@dp.message(AddAccount.client_id)
async def add_account_client(m: Message, state: FSMContext):
    await state.update_data(client_id=m.text.strip())
    await m.answer("–í–≤–µ–¥–∏—Ç–µ account_id (–∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –º–∞–≥–∞–∑–∏–Ω–∞):")
    await state.set_state(AddAccount.account_id)

@dp.message(AddAccount.account_id)
async def add_account_accid(m: Message, state: FSMContext):
    await state.update_data(account_id=m.text.strip())
    data = await state.get_data()
    if data["market"] == "ozon":
        await m.answer("–í–≤–µ–¥–∏—Ç–µ Ozon Client-ID (—á–∏—Å–ª–æ –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞):")
        await state.set_state(AddAccount.ozon_client_id)
    else:  # wb
        await m.answer("–í–≤–µ–¥–∏—Ç–µ WB API-key (—Ç–æ–∫–µ–Ω):")
        await state.set_state(AddAccount.api_key)

@dp.message(AddAccount.ozon_client_id)
async def add_account_ozon_cid(m: Message, state: FSMContext):
    await state.update_data(ozon_client_id=m.text.strip())
    await m.answer("–í–≤–µ–¥–∏—Ç–µ Ozon API-key:")
    await state.set_state(AddAccount.api_key)

@dp.message(AddAccount.api_key)
async def add_account_apikey(m: Message, state: FSMContext):
    await state.update_data(api_key=m.text.strip())
    await m.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä –ú–æ—Å–∫–≤–∞):")
    await state.set_state(AddAccount.region)

@dp.message(AddAccount.region)
async def add_account_finish(m: Message, state: FSMContext):
    await state.update_data(region=m.text.strip())
    data = await state.get_data()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync-—Å–µ—Å—Å–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ event loop
    def sync_insert():
        with sync_session_factory() as session:
            # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            stmt_cli = (
                insert(Client)
                .values(id=data["client_id"], name=data["client_id"], group_chat_id=0)
                .on_conflict_do_nothing(index_elements=["id"])
            )
            session.execute(stmt_cli)

            # –≤—Å—Ç–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
            stmt_acc = (
                insert(Account)
                .values(
                    client_id=data["client_id"],
                    market=data["market"],
                    account_id=data["account_id"],
                    api_key=data["api_key"],
                    region=data["region"],
                    ozon_client_id=data.get("ozon_client_id"),
                )
                .on_conflict_do_update(
                    index_elements=["client_id", "market", "account_id"],
                    set_={
                        "api_key": data["api_key"],
                        "region": data["region"],
                        "ozon_client_id": data.get("ozon_client_id"),
                    }
                )
            )
            session.execute(stmt_acc)
            session.commit()
    
    import concurrent.futures
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(None, sync_insert)

    await m.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –°–ü–ü –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    await state.clear()


# ----------------------- SET TOPIC ------------------------------
@dp.message(F.text.startswith("/set_topic"))
async def set_topic(m: Message):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç topic_id —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–¥–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞."""
    parts = m.text.split()
    if len(parts) != 2:
        await m.answer("–§–æ—Ä–º–∞—Ç: /set_topic <account_id>", parse_mode="HTML")
        return
    
    account_id = parts[1].strip()
    topic_id = m.message_thread_id if m.is_topic_message else None
    
    if not topic_id:
        await m.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Ç—Ä–µ–¥–µ (topic).")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync-—Å–µ—Å—Å–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ event loop
    def sync_update():
        with sync_session_factory() as session:
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç
            stmt = select(Account).where(Account.account_id == account_id)
            result = session.execute(stmt)
            account = result.scalar_one_or_none()
            
            if not account:
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º topic_id
            stmt_update = (
                update(Account)
                .where(Account.account_id == account_id)
                .values(topic_id=topic_id)
            )
            session.execute(stmt_update)
            session.commit()
            return True
    
    import concurrent.futures
    loop = asyncio.get_running_loop()
    account_found = await loop.run_in_executor(None, sync_update)
    
    if not account_found:
        await m.answer(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç —Å account_id '{safe_error_message(account_id)}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    await m.answer(f"‚úÖ Topic ID {safe_error_message(topic_id)} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {safe_error_message(account_id)}")


# ----------------------- GET TEMPLATE ------------------------------
@dp.message(F.text.in_({"get_template", "/get_template"})) #!–í–ê–ñ–ù–û
async def get_template(m: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω Excel –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤."""
    try:
        template_path = await excel_loader.generate_template()
        await m.answer_document(
            FSInputFile(template_path),
            caption="üìã <b>–®–∞–±–ª–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
                   "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É –°–ü–ü –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n\n"
                   "<i>–ö–æ–ª–æ–Ω–∫–∏:</i>\n"
                   "‚Ä¢ client_id - ID –∫–ª–∏–µ–Ω—Ç–∞\n"
                   "‚Ä¢ market - –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (ozon/wb)\n"
                   "‚Ä¢ account_id - ID –∞–∫–∫–∞—É–Ω—Ç–∞\n"
                   "‚Ä¢ product_code - –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞\n"
                   "‚Ä¢ product_name - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
                   "‚Ä¢ product_link - —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä",
            parse_mode="HTML"
        )
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {safe_error_message(e)}")


# ----------------------- UPLOAD PRODUCTS ------------------------------
@dp.message(F.document.mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
async def upload_products(m: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª —Å —Ç–æ–≤–∞—Ä–∞–º–∏."""
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(m.document.file_id)
        file_path = file_info.file_path
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            await bot.download_file(file_path, tmp.name)
            tmp_path = tmp.name
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        ok, errors, error_file_path = await excel_loader.load_excel(tmp_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(tmp_path)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if ok > 0:
            message = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ <b>{ok}</b> —Ç–æ–≤–∞—Ä–æ–≤"
            if errors:
                message += f"\n‚ö†Ô∏è –û—à–∏–±–æ–∫: <b>{len(errors)}</b>"
        else:
            message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã"
            if errors:
                message += f"\n‚ö†Ô∏è –û—à–∏–±–æ–∫: <b>{len(errors)}</b>"
        
        await m.answer(message, parse_mode="HTML")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if errors:
            # –°–æ–∑–¥–∞–µ–º txt —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏
            errors_text = f"–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤\n"
            errors_text += f"–î–∞—Ç–∞: {dt.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            errors_text += f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {ok} —Ç–æ–≤–∞—Ä–æ–≤\n"
            errors_text += f"–û—à–∏–±–æ–∫: {len(errors)}\n"
            errors_text += "=" * 50 + "\n\n"
            
            for i, error in enumerate(errors, 1):
                errors_text += f"{i}. {error}\n"
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix=".txt", encoding='utf-8') as tmp_errors:
                tmp_errors.write(errors_text)
                errors_file_path = tmp_errors.name
            
            await m.answer_document(
                FSInputFile(errors_file_path),
                caption="üìã –§–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤",
                parse_mode="HTML"
            )
            os.unlink(errors_file_path)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π Excel —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏, –µ—Å–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if error_file_path and os.path.exists(error_file_path):
            os.unlink(error_file_path)
            
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {safe_error_message(e)}")


# ----------------------- SNAPSHOT ------------------------------
@dp.message(F.text.startswith("/snapshot"))
async def snapshot(m: Message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV —Å—Ä–µ–∑ –°–ü–ü –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É."""
    parts = m.text.split()
    if len(parts) != 2:
        await m.answer("–§–æ—Ä–º–∞—Ç: /snapshot YYYY-MM-DD")
        return
    
    try:
        date_str = parts[1]
        date = dt.datetime.strptime(date_str, "%Y-%m-%d").date()
    except ValueError:
        await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
        return
    
    # –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    await m.answer(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –°–ü–ü –∑–∞ {safe_error_message(date_str)}...\n\n<i>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>", parse_mode="HTML")


# ----------------------- COLLECT NOW ------------------------------
@dp.message(Command("collect_now"))
async def collect_now(m: Message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä —Ü–µ–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."""
    try:
        from tasks.app_v2 import collect_all_accounts_v2
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Celery
        task = collect_all_accounts_v2.delay()
        await m.answer(f"üöÄ –ó–∞–ø—É—â–µ–Ω —Å–±–æ—Ä —Ü–µ–Ω –°–ü–ü v2\n\nTask ID: <code>{safe_error_message(task.id)}</code>", parse_mode="HTML")
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–±–æ—Ä–∞: {safe_error_message(e)}")


# ----------------------- CALLBACK HANDLERS ------------------------------
@dp.callback_query(F.data.startswith("excel_report|"))
async def handle_excel_report_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É Excel-–æ—Ç—á–µ—Ç–∞ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç celery-–∑–∞–¥–∞—á—É"""
    try:
        data = callback.data.split("|")
        if len(data) < 3:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞", show_alert=True)
            return
        
        client_id, date_str = data[1], data[2]
        marketplace = data[3] if len(data) > 3 else None
        
        from tasks.app_v2 import send_excel_report_v2
        send_excel_report_v2.delay(client_id, date_str, marketplace)
        
        marketplace_name = ""
        if marketplace == "ozon":
            marketplace_name = " Ozon"
        elif marketplace == "wb":
            marketplace_name = " Wildberries"
        
        await callback.answer(f"–§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-–æ—Ç—á–µ—Ç{marketplace_name}...", show_alert=True)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {safe_error_message(e)}", show_alert=True)


# ----------------------- STARTUP ------------------------------
async def on_startup():
    await create_tables()
    logging.info("Bot started")

def main():
    asyncio.run(on_startup())
    asyncio.run(dp.start_polling(bot))


if __name__ == "__main__":
    main()

router = dp