#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ PriceBot
"""
import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

async def test_database():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from db.session import async_session_factory, create_tables
        from db.models import Client, Account, Product
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        await create_tables()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
        async with async_session_factory() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            from sqlalchemy import select
            result = await session.execute(select(Client))
            clients = result.scalars().all()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False
    return True

async def test_collectors():
    """–¢–µ—Å—Ç —Å–±–æ—Ä—â–∏–∫–æ–≤ —Ü–µ–Ω"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä—â–∏–∫–∏ —Ü–µ–Ω...")
    try:
        from services.collectors.ozon import fetch_prices_ozon
        from services.collectors.wb import fetch_prices_wb
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        mock_account = {
            "account_id": "test",
            "ozon_client_id": "123",
            "api_key": "test_key"
        }
        mock_products = []
        
        result_ozon = await fetch_prices_ozon(mock_account, mock_products)
        result_wb = await fetch_prices_wb(mock_account, mock_products)
        
        print("‚úÖ –°–±–æ—Ä—â–∏–∫–∏ —Ü–µ–Ω —Ä–∞–±–æ—Ç–∞—é—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä—â–∏–∫–æ–≤: {e}")
        return False

async def test_excel_loader():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ Excel"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ Excel...")
    try:
        from services import excel_loader
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —à–∞–±–ª–æ–Ω–∞
        template_path = await excel_loader.generate_template()
        if os.path.exists(template_path):
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Excel loader: {e}")
        return False

async def test_summary_reporter():
    """–¢–µ—Å—Ç summary reporter"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º summary reporter...")
    try:
        from services.reporters.summary import format_summary_message
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        mock_client = type('MockClient', (), {
            'id': 'TEST',
            'name': 'Test Client'
        })()
        
        mock_data = {
            "increased": 5,
            "decreased": 3,
            "unchanged": 10
        }
        
        import datetime as dt
        message = format_summary_message(mock_client, mock_data, dt.date.today())
        
        if "Test Client" in message and "5" in message:
            print("‚úÖ Summary reporter —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ summary reporter: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ PriceBot...")
    print("=" * 50)
    
    tests = [
        test_database,
        test_collectors,
        test_excel_loader,
        test_summary_reporter
    ]
    
    results = []
    for test in tests:
        try:
            result = await test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            results.append(False)
        print()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    passed = sum(results)
    total = len(results)
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 