"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram API.
–í—ã–¥–µ–ª–µ–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏.
"""

import os
import requests
import io
from typing import Optional, Dict, Any
from celery.utils.log import get_task_logger

logger = get_task_logger(__name__)


def safe_error_message(text: str) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è HTML.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""
    return text.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")


def get_marketplace_display_name(marketplace: Optional[str]) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞.
    
    Args:
        marketplace: –ö–æ–¥ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (ozon/wb)
        
    Returns:
        –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    """
    if marketplace == "ozon":
        return " Ozon"
    elif marketplace == "wb":
        return " Wildberries"
    return ""


def get_marketplace_suffix(marketplace: Optional[str]) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    
    Args:
        marketplace: –ö–æ–¥ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (ozon/wb)
        
    Returns:
        –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —Ñ–∞–π–ª–∞
    """
    if marketplace == "ozon":
        return "_Ozon"
    elif marketplace == "wb":
        return "_WB"
    return ""


def send_document_to_telegram(
    chat_id: str,
    document_data: io.BytesIO,
    filename: str,
    caption: str,
    bot_token: Optional[str] = None
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram —á–∞—Ç.
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        document_data: –î–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        filename: –ò–º—è —Ñ–∞–π–ª–∞
        caption: –ü–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ env)
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if not bot_token:
        bot_token = os.getenv("BOT_TOKEN")
    
    if not bot_token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    url = f"https://api.telegram.org/bot{bot_token}/sendDocument"
    
    files = {
        'document': (
            filename, 
            document_data.read(), 
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
    }
    
    data = {
        'chat_id': chat_id,
        'caption': caption,
        'parse_mode': 'HTML'
    }
    
    try:
        response = requests.post(url, data=data, files=files, timeout=30)
        if response.status_code == 200:
            logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç {filename} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.text}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        return False


def send_text_message_to_telegram(
    chat_id: str,
    text: str,
    parse_mode: str = "HTML",
    bot_token: Optional[str] = None
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç.
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML/Markdown)
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """
    if not bot_token:
        bot_token = os.getenv("BOT_TOKEN")
    
    if not bot_token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    
    data = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': parse_mode
    }
    
    try:
        response = requests.post(url, data=data, timeout=30)
        if response.status_code == 200:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False


def create_excel_report_caption(date_str: str, marketplace: Optional[str] = None) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞.
    
    Args:
        date_str: –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
        marketplace: –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –ü–æ–¥–ø–∏—Å—å –¥–ª—è –æ—Ç—á–µ—Ç–∞
    """
    marketplace_display = get_marketplace_display_name(marketplace)
    safe_date = safe_error_message(date_str)
    
    return f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π Excel-–æ—Ç—á–µ—Ç{marketplace_display} –∑–∞ {safe_date}</b>"


def create_excel_filename(client_id: str, date_str: str, marketplace: Optional[str] = None) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è Excel –æ—Ç—á–µ—Ç–∞.
    
    Args:
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        date_str: –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞
        marketplace: –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –ò–º—è —Ñ–∞–π–ª–∞
    """
    file_suffix = get_marketplace_suffix(marketplace)
    return f"report_comparison_{client_id}_{date_str}{file_suffix}.xlsx" 