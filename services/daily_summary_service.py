# services/daily_summary_service.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.
–†–∞–∑–±–∏—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Single Responsibility.
"""

import os
import pytz
import redis
import requests
from datetime import datetime, timedelta, date
from typing import List, Dict, Optional, Tuple, Any
from dataclasses import dataclass
from celery.utils.log import get_task_logger
from sqlalchemy import text

logger = get_task_logger(__name__)
MSK_TZ = pytz.timezone('Europe/Moscow')


@dataclass
class MarketplaceStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É."""
    total_tracked: int
    increased: int
    decreased: int
    unchanged: int
    new_products: int


@dataclass
class SummaryData:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞."""
    client: Any
    marketplace: str
    today_results: List[Any]
    previous_results: List[Any]
    today_timestamp: datetime
    previous_timestamp: Optional[datetime]
    stats: MarketplaceStats


def get_redis_client() -> redis.Redis:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis.
    
    Returns:
        Redis –∫–ª–∏–µ–Ω—Ç
    """
    try:
        return redis.Redis(host='redis', port=6379, db=0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        raise


def safe_error_message(text: Any) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è HTML.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        
    Returns:
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    if text is None:
        return ""
    text_str = str(text)
    return text_str.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")


def get_clients_for_summary(session, client_id: Optional[str]) -> List[Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤.
    
    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        client_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
        
    Returns:
        –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    """
    try:
        from db.models import Client
        
        if client_id:
            clients = session.query(Client).filter(Client.id == client_id).all()
        else:
            clients = session.query(Client).all()
        
        return clients
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        return []


def is_summary_already_sent(redis_client: redis.Redis, client_id: str, date_str: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    
    Args:
        redis_client: Redis –∫–ª–∏–µ–Ω—Ç
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        date_str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
    Returns:
        True –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è
    """
    try:
        redis_key = f"daily_summary_sent:{client_id}:{date_str}"
        return bool(redis_client.get(redis_key))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis: {e}")
        return False


def mark_summary_as_sent(redis_client: redis.Redis, client_id: str, date_str: str) -> None:
    """
    –û—Ç–º–µ—á–∞–µ—Ç –æ—Ç—á–µ—Ç –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤ Redis.
    
    Args:
        redis_client: Redis –∫–ª–∏–µ–Ω—Ç
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        date_str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    """
    try:
        redis_key = f"daily_summary_sent:{client_id}:{date_str}"
        redis_client.setex(redis_key, 86400, "sent")  # 24 —á–∞—Å–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis: {e}")


def fetch_today_results(session, client_id: str, marketplace: str, today: date) -> List[Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞.
    
    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        marketplace: –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (ozon/wb)
        today: –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        results = session.execute(text("""
            SELECT DISTINCT ON (r.product_code) 
                r.product_code, r.product_name, r.product_link, 
                r.market_price, r.showcase_price, r.timestamp,
                a.market
            FROM results r
            JOIN accounts a ON r.account_id = a.id
            WHERE r.client_id = :client_id 
                AND a.market = :marketplace
                AND r.timestamp >= :today_start 
                AND r.timestamp < :today_end
            ORDER BY r.product_code, r.timestamp DESC
        """), {
            "client_id": client_id,
            "marketplace": marketplace,
            "today_start": today,
            "today_end": today + timedelta(days=1)
        }).fetchall()
        
        return results
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {e}")
        return []


def fetch_previous_results(session, client_id: str, marketplace: str, today_timestamp: datetime) -> List[Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
    
    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        marketplace: –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (ozon/wb)
        today_timestamp: –í—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ä–µ–∑–∞
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    try:
        results = session.execute(text("""
            SELECT DISTINCT ON (r.product_code) 
                r.product_code, r.product_name, r.product_link, 
                r.market_price, r.showcase_price, r.timestamp,
                a.market
            FROM results r
            JOIN accounts a ON r.account_id = a.id
            WHERE r.client_id = :client_id 
                AND a.market = :marketplace
                AND r.timestamp < :today_timestamp
            ORDER BY r.product_code, r.timestamp DESC
        """), {
            "client_id": client_id,
            "marketplace": marketplace,
            "today_timestamp": today_timestamp
        }).fetchall()
        
        return results
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []


def calculate_discount_percent(market_price: float, showcase_price: float) -> float:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏.
    
    Args:
        market_price: –¶–µ–Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
        showcase_price: –¶–µ–Ω–∞ –Ω–∞ –≤–∏—Ç—Ä–∏–Ω–µ
        
    Returns:
        –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (0.0 - 1.0)
    """
    if not market_price or not showcase_price or market_price <= 0:
        return 0.0
    
    return (market_price - showcase_price) / market_price


def calculate_marketplace_stats(today_results: List[Any], previous_results: List[Any]) -> MarketplaceStats:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É.
    
    Args:
        today_results: –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        previous_results: –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
    Returns:
        MarketplaceStats —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    stats = MarketplaceStats(
        total_tracked=len(today_results),
        increased=0,
        decreased=0,
        unchanged=0,
        new_products=0
    )
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    previous_data = {r.product_code: r for r in previous_results}
    
    for today_result in today_results:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–∏–¥–∫—É
        today_discount = calculate_discount_percent(
            today_result.market_price or 0,
            today_result.showcase_price or 0
        )
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        prev_result = previous_data.get(today_result.product_code)
        
        if prev_result is None:
            stats.new_products += 1
        else:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–∫–∏–¥–∫—É
            prev_discount = calculate_discount_percent(
                prev_result.market_price or 0,
                prev_result.showcase_price or 0
            )
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–∫–∏–¥–∫–∏ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
            today_discount_rounded = round(today_discount, 2)
            prev_discount_rounded = round(prev_discount, 2)
            
            if today_discount_rounded > prev_discount_rounded:
                stats.increased += 1  # –°–ü–ü –≤—ã—Ä–æ—Å–ª–∞
            elif today_discount_rounded < prev_discount_rounded:
                stats.decreased += 1  # –°–ü–ü —Å–Ω–∏–∑–∏–ª–∞—Å—å
            else:
                stats.unchanged += 1
    
    return stats


def get_marketplace_display_info(marketplace: str) -> Tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —ç–º–æ–¥–∑–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞.
    
    Args:
        marketplace: –ö–æ–¥ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (ozon/wb)
        
    Returns:
        Tuple[–Ω–∞–∑–≤–∞–Ω–∏–µ, —ç–º–æ–¥–∑–∏]
    """
    if marketplace == "ozon":
        return "Ozon", "üü†"
    elif marketplace == "wb":
        return "Wildberries", "üü£"
    else:
        return marketplace.title(), "üìä"


def format_summary_message(summary_data: SummaryData, today: date) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–æ–º.
    
    Args:
        summary_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        today: –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    marketplace_name, marketplace_emoji = get_marketplace_display_info(summary_data.marketplace)
    
    message = f"{marketplace_emoji} <b>–û—Ç—á–µ—Ç –°–ü–ü –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - {marketplace_name}</b>\n\n"
    message += f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {safe_error_message(summary_data.client.name)} (ID: {safe_error_message(summary_data.client.id)})\n"
    message += f"<b>–î–∞—Ç–∞:</b> {today.strftime('%d.%m.%Y')}\n"
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
    today_timestamp_msk = summary_data.today_timestamp.replace(tzinfo=pytz.UTC).astimezone(MSK_TZ)
    message += f"<b>–¢–µ–∫—É—â–∏–π —Å—Ä–µ–∑:</b> {today_timestamp_msk.strftime('%d.%m.%Y %H:%M')} –ú–°–ö\n"
    
    if summary_data.previous_timestamp:
        previous_timestamp_msk = summary_data.previous_timestamp.replace(tzinfo=pytz.UTC).astimezone(MSK_TZ)
        message += f"<b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å:</b> {previous_timestamp_msk.strftime('%d.%m.%Y %H:%M')} –ú–°–ö\n\n"
    else:
        message += f"<b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å:</b> –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = summary_data.stats
    message += f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    message += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {stats.total_tracked}\n"
    message += f"‚Ä¢ –°–ü–ü –≤—ã—Ä–æ—Å–ª–∞ (—Å–∫–∏–¥–∫–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å): {stats.increased}\n"
    message += f"‚Ä¢ –°–ü–ü —Å–Ω–∏–∑–∏–ª–∞—Å—å (—Å–∫–∏–¥–∫–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å): {stats.decreased}\n"
    message += f"‚Ä¢ –°–ü–ü –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {stats.unchanged}\n"
    message += f"‚Ä¢ –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã: {stats.new_products}\n\n"
    
    return message


def create_inline_keyboard(client_id: str, today: date, marketplace: str) -> Dict[str, Any]:
    """
    –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    
    Args:
        client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
        today: –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        marketplace: –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å
        
    Returns:
        Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    marketplace_name, _ = get_marketplace_display_info(marketplace)
    
    return {
        "inline_keyboard": [[
            {
                "text": f"üì• –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç {marketplace_name} (EXCEL)",
                "callback_data": f"excel_report|{client_id}|{today.strftime('%Y-%m-%d')}|{marketplace}"
            }
        ]]
    }


def send_telegram_message(chat_id: str, message: str, reply_markup: Dict[str, Any]) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram.
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        reply_markup: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    """
    try:
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "HTML",
            "reply_markup": reply_markup
        }
        
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code == 200:
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False


def generate_summary_for_marketplace(session, client: Any, marketplace: str, today: date) -> Optional[SummaryData]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞.
    
    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        client: –û–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
        marketplace: –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (ozon/wb)
        today: –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        
    Returns:
        SummaryData –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        today_results = fetch_today_results(session, client.id, marketplace, today)
        if not today_results:
            logger.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.id} –Ω–∞ {marketplace}")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–µ–∑–∞
        today_timestamp = max(r.timestamp for r in today_results)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        previous_results = fetch_previous_results(session, client.id, marketplace, today_timestamp)
        previous_timestamp = max(r.timestamp for r in previous_results) if previous_results else None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = calculate_marketplace_stats(today_results, previous_results)
        
        return SummaryData(
            client=client,
            marketplace=marketplace,
            today_results=today_results,
            previous_results=previous_results,
            today_timestamp=today_timestamp,
            previous_timestamp=previous_timestamp,
            stats=stats
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {marketplace}: {e}")
        return None


def send_daily_summary_refactored(client_id: Optional[str] = None, force_send: bool = False) -> int:
    """
    –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
    
    –¶–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 7 (–±—ã–ª–æ 20)
    –†–∞–∑–±–∏—Ç–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Single Responsibility.
    
    Args:
        client_id: ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ None –¥–ª—è –≤—Å–µ—Ö
        force_send: –ï—Å–ª–∏ True, –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É "—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —Å–µ–≥–æ–¥–Ω—è"
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ v2 –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {client_id or '–≤—Å–µ—Ö'}, force_send: {force_send}")
    
    try:
        from db.session import get_sync_session
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (CC: 1)
        redis_client = get_redis_client()
        session = get_sync_session()
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ (CC: 1)
        clients = get_clients_for_summary(session, client_id)
        
        today = datetime.now().date()
        today_str = today.strftime('%Y-%m-%d')
        total_sent = 0
        
        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (CC: 1)
        for client in clients:
            if not client.group_chat_id:
                logger.warning(f"–ö–ª–∏–µ–Ω—Ç {client.id} –Ω–µ –∏–º–µ–µ—Ç group_chat_id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (CC: 1)
            if not force_send and is_summary_already_sent(redis_client, client.id, today_str):
                logger.info(f"–û—Ç—á–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.id} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            client_reports_sent = 0
            
            # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (CC: 1)
            for marketplace in ['ozon', 'wb']:
                success = process_marketplace_summary(session, client, marketplace, today)
                if success:
                    client_reports_sent += 1
                    total_sent += 1
            
            # 6. –û—Ç–º–µ—Ç–∫–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ (CC: 1)
            if client_reports_sent > 0:
                mark_summary_as_sent(redis_client, client.id, today_str)
        
        session.close()
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: {total_sent}")
        
        return total_sent
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≤ send_daily_summary: {e}")
        return 0


def process_marketplace_summary(session, client: Any, marketplace: str, today: date) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞.
    
    Args:
        session: –°–µ—Å—Å–∏—è –ë–î
        client: –û–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
        marketplace: –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å (ozon/wb)
        today: –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
        
    Returns:
        True –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    """
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
        summary_data = generate_summary_for_marketplace(session, client, marketplace, today)
        if not summary_data:
            return False
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = format_summary_message(summary_data, today)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = create_inline_keyboard(client.id, today, marketplace)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        success = send_telegram_message(client.group_chat_id, message, reply_markup)
        
        if success:
            marketplace_name, _ = get_marketplace_display_info(marketplace)
            logger.info(f"–û—Ç—á–µ—Ç {marketplace_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.id}")
        
        return success
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ {marketplace} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client.id}: {e}")
        return False 