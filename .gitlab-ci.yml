# GitLab CI/CD Pipeline –¥–ª—è SPP Monitoring Bot
# –°—Ç–∞–¥–∏–∏: lint ‚Üí test ‚Üí build ‚Üí deploy

stages:
  - lint
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  LATEST_IMAGE: $CI_REGISTRY_IMAGE:latest

# –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ –¥–ª—è Python jobs
.python_base:
  image: python:3.12-slim
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends gcc build-essential
    - pip install --upgrade pip
    - pip install -r requirements-dev.txt
  cache:
    paths:
      - .pip-cache/
    policy: pull-push

# ==================== LINT STAGE ====================

lint:flake8:
  extends: .python_base
  stage: lint
  script:
    - echo "üîç –ó–∞–ø—É—Å–∫ flake8 –ø—Ä–æ–≤–µ—Ä–∫–∏..."
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - flake8 . --count --max-complexity=10 --max-line-length=88 --statistics
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "dev"

lint:black:
  extends: .python_base
  stage: lint
  script:
    - echo "üé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å black..."
    - black --check --diff .
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "dev"

# ==================== TEST STAGE ====================

test:unit:
  extends: .python_base
  stage: test
  services:
    - postgres:15
    - redis:7-alpine
  variables:
    POSTGRES_DB: pricebot_test
    POSTGRES_USER: pricebot
    POSTGRES_PASSWORD: test_password
    DATABASE_URL: postgresql+asyncpg://pricebot:test_password@postgres:5432/pricebot_test
    DATABASE_URL_SYNC: postgresql+psycopg2://pricebot:test_password@postgres:5432/pricebot_test
    REDIS_URL: redis://redis:6379/1
    BOT_TOKEN: "test_token_placeholder"
  script:
    - echo "üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤..."
    - pytest test_basic.py test_excel_upload.py -v --cov=. --cov-report=xml --cov-report=term
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "dev"

# ==================== BUILD STAGE ====================

build:docker:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: /certs/client
  before_script:
    - echo "üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ GitLab Container Registry..."
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    - docker build -t $IMAGE_NAME -t $LATEST_IMAGE .
    - echo "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–∑–∞ –≤ registry..."
    - docker push $IMAGE_NAME
    - docker push $LATEST_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "dev"

# ==================== DEPLOY STAGE ====================

deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - echo "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ production —Å–µ—Ä–≤–µ—Ä..."
    - |
      ssh $DEPLOY_USER@$DEPLOY_HOST << 'EOF'
        cd $DEPLOY_PATH
        echo "Pulling latest changes from main..."
        git pull origin main
        echo "Updating containers..."
        docker-compose pull
        docker-compose up -d
        echo "Production deployment completed!"
      EOF
  environment:
    name: production
    url: https://$DEPLOY_HOST
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual
