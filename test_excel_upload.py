#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π Excel —Ñ–∞–π–ª–æ–≤
"""
import asyncio
import os
import sys
import tempfile
import pandas as pd
import html
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

def safe_error_message(error) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ–± –æ—à–∏–±–∫–∞—Ö"""
    return html.escape(str(error))

async def test_excel_upload_with_errors():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É Excel —Ñ–∞–π–ª–∞ —Å –æ—à–∏–±–∫–∞–º–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É Excel —Ñ–∞–π–ª–∞ —Å –æ—à–∏–±–∫–∞–º–∏...")
    
    try:
        from services import excel_loader
        from db.session import create_tables
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        await create_tables()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–∞–º–∏
        test_data = [
            {
                "client_id": "TEST",
                "market": "ozon",
                "account_id": "test_account",
                "product_code": "TEST001",
                "product_name": "–¢–æ–≤–∞—Ä —Å <class='error'>–æ—à–∏–±–∫–æ–π HTML</class>",
                "product_link": "https://example.com/test001"
            },
            {
                "client_id": "",  # –ü—É—Å—Ç–æ–π client_id - –æ—à–∏–±–∫–∞
                "market": "wb",
                "account_id": "test_account",
                "product_code": "TEST002",
                "product_name": "–¢–æ–≤–∞—Ä —Å –ø—É—Å—Ç—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º",
                "product_link": "https://example.com/test002"
            },
            {
                "client_id": "TEST",
                "market": "invalid_market",  # –ù–µ–≤–µ—Ä–Ω—ã–π market - –æ—à–∏–±–∫–∞
                "account_id": "test_account",
                "product_code": "TEST003",
                "product_name": "–¢–æ–≤–∞—Ä —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –º–∞—Ä–∫–µ—Ç–æ–º",
                "product_link": "https://example.com/test003"
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π Excel —Ñ–∞–π–ª
        df = pd.DataFrame(test_data)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
            df.to_excel(tmp.name, index=False)
            test_file_path = tmp.name
        
        print(f"–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file_path}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        ok, errors, error_file_path = await excel_loader.load_excel(test_file_path)
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {ok} —É—Å–ø–µ—à–Ω—ã—Ö, {len(errors)} –æ—à–∏–±–æ–∫")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤ –±–æ—Ç–µ
        if ok > 0:
            message = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ <b>{ok}</b> —Ç–æ–≤–∞—Ä–æ–≤"
            if errors:
                message += f"\n‚ö†Ô∏è –û—à–∏–±–æ–∫: <b>{len(errors)}</b>"
        else:
            message = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã"
        
        if errors:
            message += "\n\n<i>–ü–µ—Ä–≤—ã–µ –æ—à–∏–±–∫–∏:</i>\n"
            for i, error in enumerate(errors[:5]):
                message += f"‚Ä¢ {error}\n"
            if len(errors) > 5:
                message += f"‚Ä¢ ... –∏ –µ—â—ë {len(errors) - 5} –æ—à–∏–±–æ–∫"
        
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:")
        print(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ HTML —Ç–µ–≥–∏
        print("\nüîç –ê–Ω–∞–ª–∏–∑ HTML —Ç–µ–≥–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:")
        if "<class=" in message:
            print("‚ùå –ù–∞–π–¥–µ–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ–≥ <class=")
        if "class=" in message:
            print("‚ùå –ù–∞–π–¥–µ–Ω –∞—Ç—Ä–∏–±—É—Ç class=")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫:")
        for error in errors:
            escaped = safe_error_message(error)
            print(f"–û—Ä–∏–≥–∏–Ω–∞–ª: {error}")
            print(f"–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {escaped}")
            print()
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        os.unlink(test_file_path)
        if error_file_path and os.path.exists(error_file_path):
            os.unlink(error_file_path)
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_html_escaping():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML...")
    
    test_strings = [
        "–û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞",
        "–°—Ç—Ä–æ–∫–∞ —Å <b>–∂–∏—Ä–Ω—ã–º</b> —Ç–µ–∫—Å—Ç–æ–º",
        "–°—Ç—Ä–æ–∫–∞ —Å <class='error'>–∫–ª–∞—Å—Å–æ–º</class>",
        "–°—Ç—Ä–æ–∫–∞ —Å <div class='container'>–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º</div>",
        "–°—Ç—Ä–æ–∫–∞ —Å & –∞–º–ø–µ—Ä—Å–∞–Ω–¥–æ–º",
        "–°—Ç—Ä–æ–∫–∞ —Å \"–∫–∞–≤—ã—á–∫–∞–º–∏\"",
        "–°—Ç—Ä–æ–∫–∞ —Å '–æ–¥–∏–Ω–∞—Ä–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏'",
    ]
    
    for test_str in test_strings:
        escaped = safe_error_message(test_str)
        print(f"–û—Ä–∏–≥–∏–Ω–∞–ª: {test_str}")
        print(f"–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π: {escaped}")
        print()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–æ–≤...")
    print("=" * 60)
    
    # –¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
    await test_html_escaping()
    
    print("=" * 60)
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Å –æ—à–∏–±–∫–∞–º–∏
    await test_excel_upload_with_errors()
    
    print("=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main()) 